//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ServiceContext {

    public ServiceEntity loggingServiceEntity { get { return GetGroup(ServiceMatcher.LoggingService).GetSingleEntity(); } }
    public LoggingServiceComponent loggingService { get { return loggingServiceEntity.loggingService; } }
    public bool hasLoggingService { get { return loggingServiceEntity != null; } }

    public ServiceEntity SetLoggingService(ILoggingService newInstance) {
        if (hasLoggingService) {
            throw new Entitas.EntitasException("Could not set LoggingService!\n" + this + " already has an entity with LoggingServiceComponent!",
                "You should check if the context already has a loggingServiceEntity before setting it or use context.ReplaceLoggingService().");
        }
        var entity = CreateEntity();
        entity.AddLoggingService(newInstance);
        return entity;
    }

    public void ReplaceLoggingService(ILoggingService newInstance) {
        var entity = loggingServiceEntity;
        if (entity == null) {
            entity = SetLoggingService(newInstance);
        } else {
            entity.ReplaceLoggingService(newInstance);
        }
    }

    public void RemoveLoggingService() {
        loggingServiceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ServiceEntity {

    public LoggingServiceComponent loggingService { get { return (LoggingServiceComponent)GetComponent(ServiceComponentsLookup.LoggingService); } }
    public bool hasLoggingService { get { return HasComponent(ServiceComponentsLookup.LoggingService); } }

    public void AddLoggingService(ILoggingService newInstance) {
        var index = ServiceComponentsLookup.LoggingService;
        var component = (LoggingServiceComponent)CreateComponent(index, typeof(LoggingServiceComponent));
        component.Instance = newInstance;
        AddComponent(index, component);
    }

    public void ReplaceLoggingService(ILoggingService newInstance) {
        var index = ServiceComponentsLookup.LoggingService;
        var component = (LoggingServiceComponent)CreateComponent(index, typeof(LoggingServiceComponent));
        component.Instance = newInstance;
        ReplaceComponent(index, component);
    }

    public void RemoveLoggingService() {
        RemoveComponent(ServiceComponentsLookup.LoggingService);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ServiceMatcher {

    static Entitas.IMatcher<ServiceEntity> _matcherLoggingService;

    public static Entitas.IMatcher<ServiceEntity> LoggingService {
        get {
            if (_matcherLoggingService == null) {
                var matcher = (Entitas.Matcher<ServiceEntity>)Entitas.Matcher<ServiceEntity>.AllOf(ServiceComponentsLookup.LoggingService);
                matcher.componentNames = ServiceComponentsLookup.componentNames;
                _matcherLoggingService = matcher;
            }

            return _matcherLoggingService;
        }
    }
}
