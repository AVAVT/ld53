//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity receivedDecisionEntity { get { return GetGroup(GameMatcher.ReceivedDecision).GetSingleEntity(); } }
    public ReceivedDecisionComponent receivedDecision { get { return receivedDecisionEntity.receivedDecision; } }
    public bool hasReceivedDecision { get { return receivedDecisionEntity != null; } }

    public GameEntity SetReceivedDecision(int newTurn, TurnDecision newDecision) {
        if (hasReceivedDecision) {
            throw new Entitas.EntitasException("Could not set ReceivedDecision!\n" + this + " already has an entity with ReceivedDecisionComponent!",
                "You should check if the context already has a receivedDecisionEntity before setting it or use context.ReplaceReceivedDecision().");
        }
        var entity = CreateEntity();
        entity.AddReceivedDecision(newTurn, newDecision);
        return entity;
    }

    public void ReplaceReceivedDecision(int newTurn, TurnDecision newDecision) {
        var entity = receivedDecisionEntity;
        if (entity == null) {
            entity = SetReceivedDecision(newTurn, newDecision);
        } else {
            entity.ReplaceReceivedDecision(newTurn, newDecision);
        }
    }

    public void RemoveReceivedDecision() {
        receivedDecisionEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ReceivedDecisionComponent receivedDecision { get { return (ReceivedDecisionComponent)GetComponent(GameComponentsLookup.ReceivedDecision); } }
    public bool hasReceivedDecision { get { return HasComponent(GameComponentsLookup.ReceivedDecision); } }

    public void AddReceivedDecision(int newTurn, TurnDecision newDecision) {
        var index = GameComponentsLookup.ReceivedDecision;
        var component = (ReceivedDecisionComponent)CreateComponent(index, typeof(ReceivedDecisionComponent));
        component.Turn = newTurn;
        component.Decision = newDecision;
        AddComponent(index, component);
    }

    public void ReplaceReceivedDecision(int newTurn, TurnDecision newDecision) {
        var index = GameComponentsLookup.ReceivedDecision;
        var component = (ReceivedDecisionComponent)CreateComponent(index, typeof(ReceivedDecisionComponent));
        component.Turn = newTurn;
        component.Decision = newDecision;
        ReplaceComponent(index, component);
    }

    public void RemoveReceivedDecision() {
        RemoveComponent(GameComponentsLookup.ReceivedDecision);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherReceivedDecision;

    public static Entitas.IMatcher<GameEntity> ReceivedDecision {
        get {
            if (_matcherReceivedDecision == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ReceivedDecision);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherReceivedDecision = matcher;
            }

            return _matcherReceivedDecision;
        }
    }
}
