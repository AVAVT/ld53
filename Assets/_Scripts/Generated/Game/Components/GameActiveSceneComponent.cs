//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity activeSceneEntity { get { return GetGroup(GameMatcher.ActiveScene).GetSingleEntity(); } }
    public ActiveSceneComponent activeScene { get { return activeSceneEntity.activeScene; } }
    public bool hasActiveScene { get { return activeSceneEntity != null; } }

    public GameEntity SetActiveScene(SceneTag newValue) {
        if (hasActiveScene) {
            throw new Entitas.EntitasException("Could not set ActiveScene!\n" + this + " already has an entity with ActiveSceneComponent!",
                "You should check if the context already has a activeSceneEntity before setting it or use context.ReplaceActiveScene().");
        }
        var entity = CreateEntity();
        entity.AddActiveScene(newValue);
        return entity;
    }

    public void ReplaceActiveScene(SceneTag newValue) {
        var entity = activeSceneEntity;
        if (entity == null) {
            entity = SetActiveScene(newValue);
        } else {
            entity.ReplaceActiveScene(newValue);
        }
    }

    public void RemoveActiveScene() {
        activeSceneEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ActiveSceneComponent activeScene { get { return (ActiveSceneComponent)GetComponent(GameComponentsLookup.ActiveScene); } }
    public bool hasActiveScene { get { return HasComponent(GameComponentsLookup.ActiveScene); } }

    public void AddActiveScene(SceneTag newValue) {
        var index = GameComponentsLookup.ActiveScene;
        var component = (ActiveSceneComponent)CreateComponent(index, typeof(ActiveSceneComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceActiveScene(SceneTag newValue) {
        var index = GameComponentsLookup.ActiveScene;
        var component = (ActiveSceneComponent)CreateComponent(index, typeof(ActiveSceneComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveActiveScene() {
        RemoveComponent(GameComponentsLookup.ActiveScene);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherActiveScene;

    public static Entitas.IMatcher<GameEntity> ActiveScene {
        get {
            if (_matcherActiveScene == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ActiveScene);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherActiveScene = matcher;
            }

            return _matcherActiveScene;
        }
    }
}
