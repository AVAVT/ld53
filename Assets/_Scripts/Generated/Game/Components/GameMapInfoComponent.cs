//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity mapInfoEntity { get { return GetGroup(GameMatcher.MapInfo).GetSingleEntity(); } }
    public MapInfoComponent mapInfo { get { return mapInfoEntity.mapInfo; } }
    public bool hasMapInfo { get { return mapInfoEntity != null; } }

    public GameEntity SetMapInfo(TileInfoDto[] newTiles) {
        if (hasMapInfo) {
            throw new Entitas.EntitasException("Could not set MapInfo!\n" + this + " already has an entity with MapInfoComponent!",
                "You should check if the context already has a mapInfoEntity before setting it or use context.ReplaceMapInfo().");
        }
        var entity = CreateEntity();
        entity.AddMapInfo(newTiles);
        return entity;
    }

    public void ReplaceMapInfo(TileInfoDto[] newTiles) {
        var entity = mapInfoEntity;
        if (entity == null) {
            entity = SetMapInfo(newTiles);
        } else {
            entity.ReplaceMapInfo(newTiles);
        }
    }

    public void RemoveMapInfo() {
        mapInfoEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MapInfoComponent mapInfo { get { return (MapInfoComponent)GetComponent(GameComponentsLookup.MapInfo); } }
    public bool hasMapInfo { get { return HasComponent(GameComponentsLookup.MapInfo); } }

    public void AddMapInfo(TileInfoDto[] newTiles) {
        var index = GameComponentsLookup.MapInfo;
        var component = (MapInfoComponent)CreateComponent(index, typeof(MapInfoComponent));
        component.Tiles = newTiles;
        AddComponent(index, component);
    }

    public void ReplaceMapInfo(TileInfoDto[] newTiles) {
        var index = GameComponentsLookup.MapInfo;
        var component = (MapInfoComponent)CreateComponent(index, typeof(MapInfoComponent));
        component.Tiles = newTiles;
        ReplaceComponent(index, component);
    }

    public void RemoveMapInfo() {
        RemoveComponent(GameComponentsLookup.MapInfo);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMapInfo;

    public static Entitas.IMatcher<GameEntity> MapInfo {
        get {
            if (_matcherMapInfo == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MapInfo);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMapInfo = matcher;
            }

            return _matcherMapInfo;
        }
    }
}
