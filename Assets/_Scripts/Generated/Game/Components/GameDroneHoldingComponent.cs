//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public DroneHoldingComponent droneHolding { get { return (DroneHoldingComponent)GetComponent(GameComponentsLookup.DroneHolding); } }
    public bool hasDroneHolding { get { return HasComponent(GameComponentsLookup.DroneHolding); } }

    public void AddDroneHolding(int newDroneId, int newPackageId) {
        var index = GameComponentsLookup.DroneHolding;
        var component = (DroneHoldingComponent)CreateComponent(index, typeof(DroneHoldingComponent));
        component.droneId = newDroneId;
        component.packageId = newPackageId;
        AddComponent(index, component);
    }

    public void ReplaceDroneHolding(int newDroneId, int newPackageId) {
        var index = GameComponentsLookup.DroneHolding;
        var component = (DroneHoldingComponent)CreateComponent(index, typeof(DroneHoldingComponent));
        component.droneId = newDroneId;
        component.packageId = newPackageId;
        ReplaceComponent(index, component);
    }

    public void RemoveDroneHolding() {
        RemoveComponent(GameComponentsLookup.DroneHolding);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDroneHolding;

    public static Entitas.IMatcher<GameEntity> DroneHolding {
        get {
            if (_matcherDroneHolding == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DroneHolding);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDroneHolding = matcher;
            }

            return _matcherDroneHolding;
        }
    }
}
